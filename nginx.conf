user www-data;
worker_processes auto;

pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    worker_connections 768;
    # multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    access_log  /var/log/nginx/access.log ; # anonymized;
    error_log   /var/log/nginx/error.log  ;
    
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  365;

    server_tokens off;
    
    #gzip  on;

    ##
    # SSL Settings
    ##

    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'EDH+CAMELLIA:EDH+aRSA:EECDH+aRSA+AESGCM:EECDH+aRSA+SHA256:EECDH:+CAMELLIA128:+AES128:+SSLv3:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!DSS:!RC4:!SEED:!IDEA:!ECDSA:kEDH:CAMELLIA128-SHA:AES128-SHA';
    ssl_dhparam /etc/nginx/dhparam-2048.pem;
    ssl_session_cache shared:SSL:10m;
    
    ##
    # Anonymize IP logging
    ##
    map $remote_addr $ip_anonym1 {
        default 0.0.0;
        "~(?P<ip>(\d+)\.(\d+))\.(\d+)\.\d+" $ip;
        "~(?P<ip>[^:]+:[^:]+):" $ip;
    }
     
    map $remote_addr $ip_anonym2 {
        default .0.0;
        "~(?P<ip>(\d+)\.(\d+)\.(\d+))\.\d+" .0.0;
        "~(?P<ip>[^:]+:[^:]+):" ::;
    }
     
    map $ip_anonym1$ip_anonym2 $ip_anonymized {
        default 0.0.0.0;
        "~(?P<ip>.*)" $ip;
    }

    log_format anonymized '$ip_anonymized - $remote_user [$time_local] ' 
        '"$request" $status $body_bytes_sent ' 
        '"$http_referer" "$http_user_agent"';

    ##
    # Virtual Hosts
    ##

    # Remove X-Powered-By, which is an information leak
    fastcgi_hide_header X-Powered-By;
    # set max upload size
    client_max_body_size    512M;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*.conf;
}


rtmp {
    server {
        listen        1935;
        buflen        5s;
        notify_method get;
        
        # Disable audio until first video frame is sent.
        wait_video     on; # on
        wait_key       on;
        interleave     off;
        # Send NetStream.Publish.Start and NetStream.Publish.Stop to subscribers.
        publish_notify on;
        play_restart   on;

        # Synchronize audio and video streams. If subscriber bandwidth is not
        # enough to receive data at publisher rate some frames are dropped by
        # server. This leads to synchronization problem. When timestamp
        # difference exceeds the value specified as sync argument an absolute
        # frame is sent fixing that. Default is 300ms.
        sync 150ms;


        live       on;

        # check effect of: 
        # interleave on;

        application src {
            on_publish http://[::1]:8080/auth;  # prevent unauthenticated streaming
            on_play    http://[::1]:8080/auth;  # prevent individual rtmp playback
            
            record        all;
            record_path   /var/www/stream.example.com/records;
            record_suffix -%Y-%m-%d-%H-%M-%S.flv;


            exec ffmpeg -i rtmp://localhost/src/$name\?psk=abcdef
                -c:a copy  -c:v libx264 -preset ultrafast -vf scale=256:144 -b:v 150K -f flv rtmp://localhost/hls/$name_144p
                -c:a copy  -c:v libx264 -preset ultrafast -vf scale=426:240 -b:v 286K -f flv rtmp://localhost/hls/$name_240p
                -c:a copy  -c:v libx264 -preset superfast -s hd480          -b:v 822k -f flv rtmp://localhost/hls/$name_480p
                -c:a copy  -c:v copy                                                  -f flv rtmp://localhost/hls/$name_720p
                -c:a copy  -vn -sn -dn                                                -f flv rtmp://localhost/audio/$name
                -c:a copy  -vn -sn -dn                                                -f flv rtmp://localhost/audio/$name_aac;

                # -c:a copy  -vn -sn -dn                                                -f flv rtmp://localhost/hls/$name_aac

                # audiobitraten ggf. je stream anpassen, zB 64k, 96k, 128k etc
        }

        application audio {
            allow publish 127.0.0.1;
            allow publish ::1;
            deny  publish all;
            allow play all;

            wait_video off;
            wait_key   off;
            interleave on;

            hls                   on;
            hls_path              /tmp/hls_audio;
            hls_playlist_length   100s;
            hls_fragment          10s;
            hls_nested            on;  # individual subdirectory for each stream
            hls_cleanup           on;  # remove old fragments

            hls_variant _aac TYPE=AUDIO BANDWIDTH=65000;
        }

        application hls {
            allow publish 127.0.0.1;
            allow publish ::1;
            deny  publish all;
            allow play all;

            wait_video off;

            hls                   on;
            hls_path              /tmp/hls;
            hls_playlist_length   100s;
            hls_fragment          10s;
            hls_nested            on;  # individual subdirectory for each stream
            hls_cleanup           on;  # remove old fragments

            # maybe add more attributes like FRAME-RATE, RESOLUTION etc.
            # maybe distribute lower resolution streams also with fewer frames per second?
            # hls_variant _aac  TYPE=AUDIO BANDWIDTH=65000;
            hls_variant _144p TYPE=VIDEO BANDWIDTH=218000  RESOLUTION=256x144;
            hls_variant _240p TYPE=VIDEO BANDWIDTH=364000  RESOLUTION=426x240;
            hls_variant _480p TYPE=VIDEO BANDWIDTH=900000  RESOLUTION=854x480;
            hls_variant _720p TYPE=VIDEO BANDWIDTH=3640000 RESOLUTION=1280x720;
        }
    }
}

stream {
    server {
        listen     [::]:1935;
        proxy_pass 127.0.0.1:1935;
    }
}

